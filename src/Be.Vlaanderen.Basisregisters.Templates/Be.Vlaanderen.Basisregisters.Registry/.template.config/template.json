{
  "$schema": "http://json.schemastore.org/template",
  "author": "Basisregisters Vlaanderen",
  "classifications": ["agentschap Informatie Vlaanderen", "Basisregisters Vlaanderen", "Basisregister"],
  "name": "Basisregisters Vlaanderen Registry",
  "identity": "Be.Vlaanderen.Basisregisters.Registry",
  "description": "A professional .NET Core project setup including build scripts, documentation, unit tests, and performance tests for a class library project.",
  "shortName": "be-registry",
  "groupIdentity": "Basisregisters Vlaanderen",
  "tags": {
    "language": "C#",
    "type": "project"
  },
  "sourceName": "ExampleRegistry",
  "primaryOutputs": [
  {
    "path": "ExampleRegistry.sln"
  }],
  "defaultName": "Registry1",
  "preferNameDirectory": false,
  "guids": [
    "e7c5e22c-b620-463d-8ff3-292c95673370",
    "148c9c44-ac1d-411c-a13f-908a9c7009e1",
    "734f3529-02f5-44c5-84e3-681c28f7de26"
  ],
  "placeholderFilename": "placeholder",
  "symbols": {
    "CopyrightName": {
      "type": "parameter",
      "datatype": "string",
      "description": "Copyright name to use.",
      "defaultValue": "John Smith",
      "replaces":"(copyright)"
    },

    "FullName": {
      "type": "parameter",
      "datatype": "string",
      "description": "Full name of the registry.",
      "isRequired": true,
      "defaultValue": "Example Registry",
      "replaces":"Example Registry",
    },

    "NameCamelCase": {
      "type": "generated",
      "generator": "regex",
      "dataType": "string",
      "parameters": {
        "source": "name",
        "action": "replace",
        "steps": [
          { "regex": "^(A)([a-zA-Z]*)", "replacement": "a$2" },
          { "regex": "^(B)([a-zA-Z]*)", "replacement": "b$2" },
          { "regex": "^(C)([a-zA-Z]*)", "replacement": "c$2" },
          { "regex": "^(D)([a-zA-Z]*)", "replacement": "d$2" },
          { "regex": "^(E)([a-zA-Z]*)", "replacement": "e$2" },
          { "regex": "^(F)([a-zA-Z]*)", "replacement": "f$2" },
          { "regex": "^(G)([a-zA-Z]*)", "replacement": "g$2" },
          { "regex": "^(H)([a-zA-Z]*)", "replacement": "h$2" },
          { "regex": "^(I)([a-zA-Z]*)", "replacement": "i$2" },
          { "regex": "^(J)([a-zA-Z]*)", "replacement": "j$2" },
          { "regex": "^(K)([a-zA-Z]*)", "replacement": "k$2" },
          { "regex": "^(L)([a-zA-Z]*)", "replacement": "l$2" },
          { "regex": "^(M)([a-zA-Z]*)", "replacement": "m$2" },
          { "regex": "^(N)([a-zA-Z]*)", "replacement": "n$2" },
          { "regex": "^(O)([a-zA-Z]*)", "replacement": "o$2" },
          { "regex": "^(P)([a-zA-Z]*)", "replacement": "p$2" },
          { "regex": "^(Q)([a-zA-Z]*)", "replacement": "q$2" },
          { "regex": "^(R)([a-zA-Z]*)", "replacement": "r$2" },
          { "regex": "^(S)([a-zA-Z]*)", "replacement": "s$2" },
          { "regex": "^(T)([a-zA-Z]*)", "replacement": "t$2" },
          { "regex": "^(U)([a-zA-Z]*)", "replacement": "u$2" },
          { "regex": "^(V)([a-zA-Z]*)", "replacement": "v$2" },
          { "regex": "^(W)([a-zA-Z]*)", "replacement": "w$2" },
          { "regex": "^(X)([a-zA-Z]*)", "replacement": "x$2" },
          { "regex": "^(Y)([a-zA-Z]*)", "replacement": "y$2" },
          { "regex": "^(Z)([a-zA-Z]*)", "replacement": "z$2" }
        ]
      }
    },
    "NameSnakeCase": {
      "type": "generated",
      "generator": "regex",
      "dataType": "string",
      "replaces": "example-registry",
      "parameters": {
        "source": "NameCamelCase",
        "action": "replace",
        "steps": [
          { "regex": "(A)([a-zA-Z]*)", "replacement": "-a$2" },
          { "regex": "(B)([a-zA-Z]*)", "replacement": "-b$2" },
          { "regex": "(C)([a-zA-Z]*)", "replacement": "-c$2" },
          { "regex": "(D)([a-zA-Z]*)", "replacement": "-d$2" },
          { "regex": "(E)([a-zA-Z]*)", "replacement": "-e$2" },
          { "regex": "(F)([a-zA-Z]*)", "replacement": "-f$2" },
          { "regex": "(G)([a-zA-Z]*)", "replacement": "-g$2" },
          { "regex": "(H)([a-zA-Z]*)", "replacement": "-h$2" },
          { "regex": "(I)([a-zA-Z]*)", "replacement": "-i$2" },
          { "regex": "(J)([a-zA-Z]*)", "replacement": "-j$2" },
          { "regex": "(K)([a-zA-Z]*)", "replacement": "-k$2" },
          { "regex": "(L)([a-zA-Z]*)", "replacement": "-l$2" },
          { "regex": "(M)([a-zA-Z]*)", "replacement": "-m$2" },
          { "regex": "(N)([a-zA-Z]*)", "replacement": "-n$2" },
          { "regex": "(O)([a-zA-Z]*)", "replacement": "-o$2" },
          { "regex": "(P)([a-zA-Z]*)", "replacement": "-p$2" },
          { "regex": "(Q)([a-zA-Z]*)", "replacement": "-q$2" },
          { "regex": "(R)([a-zA-Z]*)", "replacement": "-r$2" },
          { "regex": "(S)([a-zA-Z]*)", "replacement": "-s$2" },
          { "regex": "(T)([a-zA-Z]*)", "replacement": "-t$2" },
          { "regex": "(U)([a-zA-Z]*)", "replacement": "-u$2" },
          { "regex": "(V)([a-zA-Z]*)", "replacement": "-v$2" },
          { "regex": "(W)([a-zA-Z]*)", "replacement": "-w$2" },
          { "regex": "(X)([a-zA-Z]*)", "replacement": "-x$2" },
          { "regex": "(Y)([a-zA-Z]*)", "replacement": "-y$2" },
          { "regex": "(Z)([a-zA-Z]*)", "replacement": "-z$2" }
        ]
      }
    },

    "MainAggregate": {
      "type": "parameter",
      "datatype": "string",
      "description": "Main aggregate of the registry, adds an example aggregate, command handler, value objects, exceptions and controller.",
      "defaultValue": "",
      "replaces":"ExampleAggregate",
      "fileRename": "ExampleAggregate"
    },
    "MainAggregateCamelCase": {
      "type": "generated",
      "generator": "regex",
      "dataType": "string",
      "replaces": "exampleAggregate",
      "parameters": {
        "source": "MainAggregate",
        "action": "replace",
        "steps": [
          { "regex": "^(A)([a-zA-Z]*)", "replacement": "a$2" },
          { "regex": "^(B)([a-zA-Z]*)", "replacement": "b$2" },
          { "regex": "^(C)([a-zA-Z]*)", "replacement": "c$2" },
          { "regex": "^(D)([a-zA-Z]*)", "replacement": "d$2" },
          { "regex": "^(E)([a-zA-Z]*)", "replacement": "e$2" },
          { "regex": "^(F)([a-zA-Z]*)", "replacement": "f$2" },
          { "regex": "^(G)([a-zA-Z]*)", "replacement": "g$2" },
          { "regex": "^(H)([a-zA-Z]*)", "replacement": "h$2" },
          { "regex": "^(I)([a-zA-Z]*)", "replacement": "i$2" },
          { "regex": "^(J)([a-zA-Z]*)", "replacement": "j$2" },
          { "regex": "^(K)([a-zA-Z]*)", "replacement": "k$2" },
          { "regex": "^(L)([a-zA-Z]*)", "replacement": "l$2" },
          { "regex": "^(M)([a-zA-Z]*)", "replacement": "m$2" },
          { "regex": "^(N)([a-zA-Z]*)", "replacement": "n$2" },
          { "regex": "^(O)([a-zA-Z]*)", "replacement": "o$2" },
          { "regex": "^(P)([a-zA-Z]*)", "replacement": "p$2" },
          { "regex": "^(Q)([a-zA-Z]*)", "replacement": "q$2" },
          { "regex": "^(R)([a-zA-Z]*)", "replacement": "r$2" },
          { "regex": "^(S)([a-zA-Z]*)", "replacement": "s$2" },
          { "regex": "^(T)([a-zA-Z]*)", "replacement": "t$2" },
          { "regex": "^(U)([a-zA-Z]*)", "replacement": "u$2" },
          { "regex": "^(V)([a-zA-Z]*)", "replacement": "v$2" },
          { "regex": "^(W)([a-zA-Z]*)", "replacement": "w$2" },
          { "regex": "^(X)([a-zA-Z]*)", "replacement": "x$2" },
          { "regex": "^(Y)([a-zA-Z]*)", "replacement": "y$2" },
          { "regex": "^(Z)([a-zA-Z]*)", "replacement": "z$2" }
        ]
      }
    },
    "MainAggregateCamelCaseField": {
      "type": "generated",
      "generator": "regex",
      "dataType": "string",
      "replaces": "_exampleAggregate",
      "parameters": {
        "source": "MainAggregate",
        "action": "replace",
        "steps": [
          { "regex": "^(A)([a-zA-Z]*)", "replacement": "_a$2" },
          { "regex": "^(B)([a-zA-Z]*)", "replacement": "_b$2" },
          { "regex": "^(C)([a-zA-Z]*)", "replacement": "_c$2" },
          { "regex": "^(D)([a-zA-Z]*)", "replacement": "_d$2" },
          { "regex": "^(E)([a-zA-Z]*)", "replacement": "_e$2" },
          { "regex": "^(F)([a-zA-Z]*)", "replacement": "_f$2" },
          { "regex": "^(G)([a-zA-Z]*)", "replacement": "_g$2" },
          { "regex": "^(H)([a-zA-Z]*)", "replacement": "_h$2" },
          { "regex": "^(I)([a-zA-Z]*)", "replacement": "_i$2" },
          { "regex": "^(J)([a-zA-Z]*)", "replacement": "_j$2" },
          { "regex": "^(K)([a-zA-Z]*)", "replacement": "_k$2" },
          { "regex": "^(L)([a-zA-Z]*)", "replacement": "_l$2" },
          { "regex": "^(M)([a-zA-Z]*)", "replacement": "_m$2" },
          { "regex": "^(N)([a-zA-Z]*)", "replacement": "_n$2" },
          { "regex": "^(O)([a-zA-Z]*)", "replacement": "_o$2" },
          { "regex": "^(P)([a-zA-Z]*)", "replacement": "_p$2" },
          { "regex": "^(Q)([a-zA-Z]*)", "replacement": "_q$2" },
          { "regex": "^(R)([a-zA-Z]*)", "replacement": "_r$2" },
          { "regex": "^(S)([a-zA-Z]*)", "replacement": "_s$2" },
          { "regex": "^(T)([a-zA-Z]*)", "replacement": "_t$2" },
          { "regex": "^(U)([a-zA-Z]*)", "replacement": "_u$2" },
          { "regex": "^(V)([a-zA-Z]*)", "replacement": "_v$2" },
          { "regex": "^(W)([a-zA-Z]*)", "replacement": "_w$2" },
          { "regex": "^(X)([a-zA-Z]*)", "replacement": "_x$2" },
          { "regex": "^(Y)([a-zA-Z]*)", "replacement": "_y$2" },
          { "regex": "^(Z)([a-zA-Z]*)", "replacement": "_z$2" }
        ]
      }
    },
    "ExcludeExampleAggregate":{
      "type": "computed",
      "value": "(MainAggregate == \"\")"
    },

    "HttpsEverywhere": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Use the HTTPS scheme and TLS security across the entire registry.",
      "defaultValue": "true"
    },

    "HttpPort": {
      "type": "parameter",
      "datatype": "integer",
      "description": "Port number to use for the HTTP endpoint in launchSettings.json."
    },
    "HttpPortGenerated": {
      "type": "generated",
      "generator": "port"
    },
    "HttpPortReplacer": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "HttpPort",
        "fallbackVariableName": "HttpPortGenerated"
      },
      "replaces": "43300"
    },

    "HttpsPort": {
      "type": "parameter",
      "datatype": "integer",
      "description": "Port number to use for the HTTPS endpoint in launchSettings.json."
    },
    "HttpsPortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "low": 44300,
        "high": 44399
      }
    },
    "HttpsPortReplacer": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "HttpsPort",
        "fallbackVariableName": "HttpsPortGenerated"
      },
      "replaces": "44300"
    }
  },
  "sources": [
  {
    "modifiers": [
    {
      "condition": "(ExcludeExampleAggregate)",
      "exclude": [
        "src/ExampleRegistry/ExampleAggregate/**",
        "src/ExampleRegistry/Exceptions/**",
        "src/ExampleRegistry/ValueObjects/**",
        "src/ExampleRegistry.Api/ExampleAggregate/**",
        "src/ExampleRegistry.Infrastructure/Repositories/ExampleAggregates.cs",
        "test/ExampleRegistry.Tests/Infrastructure/Customizations-ExampleAggregate.cs",
        "test/ExampleRegistry.Tests/*Tests.cs"
      ]
    },
    {
      "condition": "(!HttpsEverywhere)",
      "exclude": [
        "docs/ssl/**",
        "src/ExampleRegistry.Api/example.pfx",
        "src/ExampleRegistry.Projector/example.pfx"
      ]
    }]
  }],
  "postActions": [
  {
    "condition": "(OS != \"Windows_NT\")",
    "description": "Make build script executable",
    "manualInstructions": [ { "text": "Run 'chmod +x build.sh'" }  ],
    "actionId": "cb9a6cf3-4f5c-4860-b9d2-03a574959774",
    "args": {
      "+x": "build.sh"
    },
    "continueOnError": true
  }]
}
