{
  "$schema": "http://json.schemastore.org/template",
  "author": "Basisregisters Vlaanderen",
  "classifications": ["agentschap Informatie Vlaanderen", "Basisregisters Vlaanderen", "Basisregister"],
  "name": "Basisregisters Vlaanderen Registry",
  "identity": "Be.Vlaanderen.Basisregisters.Registry",
  "description": "A professional .NET Core project setup including build scripts, documentation, unit tests, and performance tests for a class library project.",
  "shortName": "be-registry",
  "groupIdentity": "Basisregisters Vlaanderen",
  "tags": {
    "language": "C#",
    "type": "project"
  },
  "sourceName": "ExampleRegistry",
  "primaryOutputs": [
  {
    "path": "ExampleRegistry.sln"
  }],
  "defaultName": "Registry1",
  "preferNameDirectory": false,
  "guids": [
    "476f928e-6830-462f-a8a0-04bc3d8de2bb",
    "e7c5e22c-b620-463d-8ff3-292c95673370",
    "148c9c44-ac1d-411c-a13f-908a9c7009e1",
    "734f3529-02f5-44c5-84e3-681c28f7de26",
    "0417aad5-5c19-4a09-b523-cdb4864ad545",
    "13936a7a-6ba9-497e-9d96-35a956548c76"
  ],
  "placeholderFilename": "placeholder",
  "symbols": {
    "GitHubOrganisation": {
      "type": "parameter",
      "datatype": "string",
      "description": "GitHub organisation to use (typically found at https://github.com/<organisation-name>).",
      "defaultValue": "informatievlaanderen",
      "replaces": "github-organisation"
    },

    "RegistryDescription": {
      "type": "parameter",
      "datatype": "string",
      "description": "A short summary of this registry to go in the readme.",
      "defaultValue": "Write a short summary of the business goal of this registry.",
      "replaces": "Write a short summary of the business goal of this registry."
    },

    "CompanyName": {
      "type": "parameter",
      "datatype": "string",
      "description": "The company name, to be used in documentation and assembly.",
      "defaultValue": "agentschap Informatie Vlaanderen",
      "replaces": "agentschap Informatie Vlaanderen"
    },

    "CompanyEmail": {
      "type": "parameter",
      "datatype": "string",
      "description": "The company email address, to be used in documentation.",
      "defaultValue": "informatie.vlaanderen@vlaanderen.be",
      "replaces": "informatie.vlaanderen@vlaanderen.be"
    },

    "CompanySite": {
      "type": "parameter",
      "datatype": "string",
      "description": "The company website, to be used in documentation.",
      "defaultValue": "https://vlaanderen.be/informatie-vlaanderen",
      "replaces": "https://vlaanderen.be/informatie-vlaanderen"
    },

    "NameCamelCase": {
      "type": "generated",
      "generator": "regex",
      "dataType": "string",
      "replaces": "exampleRegistry",
      "parameters": {
        "source": "name",
        "action": "replace",
        "steps": [
          { "regex": "^A", "replacement": "a" },
          { "regex": "^B", "replacement": "b" },
          { "regex": "^C", "replacement": "c" },
          { "regex": "^D", "replacement": "d" },
          { "regex": "^E", "replacement": "e" },
          { "regex": "^F", "replacement": "f" },
          { "regex": "^G", "replacement": "g" },
          { "regex": "^H", "replacement": "h" },
          { "regex": "^I", "replacement": "i" },
          { "regex": "^J", "replacement": "j" },
          { "regex": "^K", "replacement": "k" },
          { "regex": "^L", "replacement": "l" },
          { "regex": "^M", "replacement": "m" },
          { "regex": "^N", "replacement": "n" },
          { "regex": "^O", "replacement": "o" },
          { "regex": "^P", "replacement": "p" },
          { "regex": "^Q", "replacement": "q" },
          { "regex": "^R", "replacement": "r" },
          { "regex": "^S", "replacement": "s" },
          { "regex": "^T", "replacement": "t" },
          { "regex": "^U", "replacement": "u" },
          { "regex": "^V", "replacement": "v" },
          { "regex": "^W", "replacement": "w" },
          { "regex": "^X", "replacement": "x" },
          { "regex": "^Y", "replacement": "y" },
          { "regex": "^Z", "replacement": "z" }
        ]
      }
    },
    "NameSnakeCase": {
      "type": "generated",
      "generator": "regex",
      "dataType": "string",
      "replaces": "example-registry",
      "parameters": {
        "source": "NameCamelCase",
        "action": "replace",
        "steps": [
          { "regex": "A", "replacement": "-a" },
          { "regex": "B", "replacement": "-b" },
          { "regex": "C", "replacement": "-c" },
          { "regex": "D", "replacement": "-d" },
          { "regex": "E", "replacement": "-e" },
          { "regex": "F", "replacement": "-f" },
          { "regex": "G", "replacement": "-g" },
          { "regex": "H", "replacement": "-h" },
          { "regex": "I", "replacement": "-i" },
          { "regex": "J", "replacement": "-j" },
          { "regex": "K", "replacement": "-k" },
          { "regex": "L", "replacement": "-l" },
          { "regex": "M", "replacement": "-m" },
          { "regex": "N", "replacement": "-n" },
          { "regex": "O", "replacement": "-o" },
          { "regex": "P", "replacement": "-p" },
          { "regex": "Q", "replacement": "-q" },
          { "regex": "R", "replacement": "-r" },
          { "regex": "S", "replacement": "-s" },
          { "regex": "T", "replacement": "-t" },
          { "regex": "U", "replacement": "-u" },
          { "regex": "V", "replacement": "-v" },
          { "regex": "W", "replacement": "-w" },
          { "regex": "X", "replacement": "-x" },
          { "regex": "Y", "replacement": "-y" },
          { "regex": "Z", "replacement": "-z" }
        ]
      }
    },
    "NameSpaced": {
      "type": "generated",
      "generator": "regex",
      "dataType": "string",
      "replaces": "Example Registry",
      "parameters": {
        "source": "name",
        "action": "replace",
        "steps": [
          { "regex": "A", "replacement": " A" },
          { "regex": "B", "replacement": " B" },
          { "regex": "C", "replacement": " C" },
          { "regex": "D", "replacement": " D" },
          { "regex": "E", "replacement": " E" },
          { "regex": "F", "replacement": " F" },
          { "regex": "G", "replacement": " G" },
          { "regex": "H", "replacement": " H" },
          { "regex": "I", "replacement": " I" },
          { "regex": "J", "replacement": " J" },
          { "regex": "K", "replacement": " K" },
          { "regex": "L", "replacement": " L" },
          { "regex": "M", "replacement": " M" },
          { "regex": "N", "replacement": " N" },
          { "regex": "O", "replacement": " O" },
          { "regex": "P", "replacement": " P" },
          { "regex": "Q", "replacement": " Q" },
          { "regex": "R", "replacement": " R" },
          { "regex": "S", "replacement": " S" },
          { "regex": "T", "replacement": " T" },
          { "regex": "U", "replacement": " U" },
          { "regex": "V", "replacement": " V" },
          { "regex": "W", "replacement": " W" },
          { "regex": "X", "replacement": " X" },
          { "regex": "Y", "replacement": " Y" },
          { "regex": "Z", "replacement": " Z" },
          { "regex": "^ ([a-zA-Z]*)", "replacement": "$1" }
        ]
      }
    },

    "MainAggregate": {
      "type": "parameter",
      "datatype": "string",
      "description": "Main aggregate of the registry, adds an example aggregate, command handler, value objects, exceptions and controller.",
      "defaultValue": "",
      "replaces":"ExampleAggregate",
      "fileRename": "ExampleAggregate"
    },
    "MainAggregateCamelCase": {
      "type": "generated",
      "generator": "regex",
      "dataType": "string",
      "replaces": "exampleAggregate",
      "parameters": {
        "source": "MainAggregate",
        "action": "replace",
        "steps": [
          { "regex": "^A", "replacement": "a" },
          { "regex": "^B", "replacement": "b" },
          { "regex": "^C", "replacement": "c" },
          { "regex": "^D", "replacement": "d" },
          { "regex": "^E", "replacement": "e" },
          { "regex": "^F", "replacement": "f" },
          { "regex": "^G", "replacement": "g" },
          { "regex": "^H", "replacement": "h" },
          { "regex": "^I", "replacement": "i" },
          { "regex": "^J", "replacement": "j" },
          { "regex": "^K", "replacement": "k" },
          { "regex": "^L", "replacement": "l" },
          { "regex": "^M", "replacement": "m" },
          { "regex": "^N", "replacement": "n" },
          { "regex": "^O", "replacement": "o" },
          { "regex": "^P", "replacement": "p" },
          { "regex": "^Q", "replacement": "q" },
          { "regex": "^R", "replacement": "r" },
          { "regex": "^S", "replacement": "s" },
          { "regex": "^T", "replacement": "t" },
          { "regex": "^U", "replacement": "u" },
          { "regex": "^V", "replacement": "v" },
          { "regex": "^W", "replacement": "w" },
          { "regex": "^X", "replacement": "x" },
          { "regex": "^Y", "replacement": "y" },
          { "regex": "^Z", "replacement": "z" }
        ]
      }
    },
    "MainAggregateCamelCaseField": {
      "type": "generated",
      "generator": "regex",
      "dataType": "string",
      "replaces": "_exampleAggregate",
      "parameters": {
        "source": "MainAggregate",
        "action": "replace",
        "steps": [
          { "regex": "^A", "replacement": "_a" },
          { "regex": "^B", "replacement": "_b" },
          { "regex": "^C", "replacement": "_c" },
          { "regex": "^D", "replacement": "_d" },
          { "regex": "^E", "replacement": "_e" },
          { "regex": "^F", "replacement": "_f" },
          { "regex": "^G", "replacement": "_g" },
          { "regex": "^H", "replacement": "_h" },
          { "regex": "^I", "replacement": "_i" },
          { "regex": "^J", "replacement": "_j" },
          { "regex": "^K", "replacement": "_k" },
          { "regex": "^L", "replacement": "_l" },
          { "regex": "^M", "replacement": "_m" },
          { "regex": "^N", "replacement": "_n" },
          { "regex": "^O", "replacement": "_o" },
          { "regex": "^P", "replacement": "_p" },
          { "regex": "^Q", "replacement": "_q" },
          { "regex": "^R", "replacement": "_r" },
          { "regex": "^S", "replacement": "_s" },
          { "regex": "^T", "replacement": "_t" },
          { "regex": "^U", "replacement": "_u" },
          { "regex": "^V", "replacement": "_v" },
          { "regex": "^W", "replacement": "_w" },
          { "regex": "^X", "replacement": "_x" },
          { "regex": "^Y", "replacement": "_y" },
          { "regex": "^Z", "replacement": "_z" }
        ]
      }
    },
    "MainAggregateSnakeCase": {
      "type": "generated",
      "generator": "regex",
      "dataType": "string",
      "replaces": "example-aggregate",
      "parameters": {
        "source": "MainAggregateCamelCase",
        "action": "replace",
        "steps": [
          { "regex": "A", "replacement": "-a" },
          { "regex": "B", "replacement": "-b" },
          { "regex": "C", "replacement": "-c" },
          { "regex": "D", "replacement": "-d" },
          { "regex": "E", "replacement": "-e" },
          { "regex": "F", "replacement": "-f" },
          { "regex": "G", "replacement": "-g" },
          { "regex": "H", "replacement": "-h" },
          { "regex": "I", "replacement": "-i" },
          { "regex": "J", "replacement": "-j" },
          { "regex": "K", "replacement": "-k" },
          { "regex": "L", "replacement": "-l" },
          { "regex": "M", "replacement": "-m" },
          { "regex": "N", "replacement": "-n" },
          { "regex": "O", "replacement": "-o" },
          { "regex": "P", "replacement": "-p" },
          { "regex": "Q", "replacement": "-q" },
          { "regex": "R", "replacement": "-r" },
          { "regex": "S", "replacement": "-s" },
          { "regex": "T", "replacement": "-t" },
          { "regex": "U", "replacement": "-u" },
          { "regex": "V", "replacement": "-v" },
          { "regex": "W", "replacement": "-w" },
          { "regex": "X", "replacement": "-x" },
          { "regex": "Y", "replacement": "-y" },
          { "regex": "Z", "replacement": "-z" }
        ]
      }
    },
    "MainAggregateSpaced": {
      "type": "generated",
      "generator": "regex",
      "dataType": "string",
      "replaces": "Example Aggregate",
      "parameters": {
        "source": "MainAggregate",
        "action": "replace",
        "steps": [
          { "regex": "A", "replacement": " A" },
          { "regex": "B", "replacement": " B" },
          { "regex": "C", "replacement": " C" },
          { "regex": "D", "replacement": " D" },
          { "regex": "E", "replacement": " E" },
          { "regex": "F", "replacement": " F" },
          { "regex": "G", "replacement": " G" },
          { "regex": "H", "replacement": " H" },
          { "regex": "I", "replacement": " I" },
          { "regex": "J", "replacement": " J" },
          { "regex": "K", "replacement": " K" },
          { "regex": "L", "replacement": " L" },
          { "regex": "M", "replacement": " M" },
          { "regex": "N", "replacement": " N" },
          { "regex": "O", "replacement": " O" },
          { "regex": "P", "replacement": " P" },
          { "regex": "Q", "replacement": " Q" },
          { "regex": "R", "replacement": " R" },
          { "regex": "S", "replacement": " S" },
          { "regex": "T", "replacement": " T" },
          { "regex": "U", "replacement": " U" },
          { "regex": "V", "replacement": " V" },
          { "regex": "W", "replacement": " W" },
          { "regex": "X", "replacement": " X" },
          { "regex": "Y", "replacement": " Y" },
          { "regex": "Z", "replacement": " Z" },
          { "regex": "^ ([a-zA-Z]*)", "replacement": "$1" }
        ]
      }
    },
    "MainAggregateSpacedLower": {
      "type": "generated",
      "generator": "casing",
      "replaces": "example aggregate",
      "parameters": {
        "source":"MainAggregateSpaced",
        "toLower": true
      }
    },
    "ExcludeExampleAggregate":{
      "type": "computed",
      "value": "(MainAggregate == \"\")"
    },

    "HttpPort": {
      "type": "parameter",
      "datatype": "integer",
      "description": "Port number to use for the HTTP endpoint in launchSettings.json (Api)."
    },
    "HttpPortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "low": 8000,
        "high": 8099
      }
    },
    "HttpPortReplacer": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "HttpPort",
        "fallbackVariableName": "HttpPortGenerated"
      },
      "replaces": "8000"
    },

    "HttpProjectorPort": {
      "type": "parameter",
      "datatype": "integer",
      "description": "Port number to use for the HTTP endpoint in launchSettings.json (Projector)."
    },
    "HttpProjectorPortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "low": 8100,
        "high": 8199
      }
    },
    "HttpProjectorPortReplacer": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "HttpProjectorPort",
        "fallbackVariableName": "HttpProjectorPortGenerated"
      },
      "replaces": "8100"
    },

    "HttpsPort": {
      "type": "parameter",
      "datatype": "integer",
      "description": "Port number to use for the HTTPS endpoint in launchSettings.json (Api)."
    },
    "HttpsPortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "low": 9000,
        "high": 9099
      }
    },
    "HttpsPortReplacer": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "HttpsPort",
        "fallbackVariableName": "HttpsPortGenerated"
      },
      "replaces": "9000"
    },

    "HttpsProjectorPort": {
      "type": "parameter",
      "datatype": "integer",
      "description": "Port number to use for the HTTPS endpoint in launchSettings.json (Projector)."
    },
    "HttpsProjectorPortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "low": 9100,
        "high": 9199
      }
    },
    "HttpsProjectorPortReplacer": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "HttpsProjectorPort",
        "fallbackVariableName": "HttpsProjectorPortGenerated"
      },
      "replaces": "9100"
    }
  },
  "sources": [
  {
    "modifiers": [
    {
      "condition": "(ExcludeExampleAggregate)",
      "exclude": [
        "src/ExampleRegistry/ExampleAggregate/**",
        "src/ExampleRegistry/Exceptions/**",
        "src/ExampleRegistry/ValueObjects/**",
        "src/ExampleRegistry.Api/ExampleAggregate/**",
        "src/ExampleRegistry.Infrastructure/Repositories/ExampleAggregates.cs",
        "test/ExampleRegistry.Tests/Infrastructure/Customizations-ExampleAggregate.cs",
        "test/ExampleRegistry.Tests/*Tests.cs"
      ]
    }]
  }],
  "postActions": [
  {
    "condition": "(OS != \"Windows_NT\")",
    "description": "Make build script executable",
    "manualInstructions": [ { "text": "Run 'chmod +x build.sh'" }  ],
    "actionId": "cb9a6cf3-4f5c-4860-b9d2-03a574959774",
    "args": {
      "+x": "build.sh"
    },
    "continueOnError": true
  }]
}
